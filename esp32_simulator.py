#!/usr/bin/env python3
"""
Simulador da ESP32 para BikeJJ
Envia dados dos sensores via HTTP (sem necessidade de porta serial)
"""
import time
import random
import threading
import json
import urllib.request
import urllib.error

class ESP32Simulator:
    def __init__(self, server_url='http://localhost:8002'):
        self.server_url = server_url
        self.is_running = False
        self.last_states = {1: 0, 2: 0, 3: 0, 4: 0}  # Estado anterior de cada jogador
        
    def send_key_command(self, player_id, action):
        """Enviar comando de tecla para o servidor"""
        try:
            # Mapear jogador para tecla
            key_map = {1: 'KeyQ', 2: 'KeyW', 3: 'KeyE', 4: 'KeyR'}
            key = key_map.get(player_id)
            
            if key:
                # Enviar comando para o servidor HTTP
                data = {
                    'type': 'key_command',
                    'player_id': player_id,
                    'key': key,
                    'action': action,
                    'timestamp': time.time()
                }
                
                # Enviar para o servidor local
                url = f'{self.server_url}/api/key'
                req = urllib.request.Request(url, 
                                          data=json.dumps(data).encode('utf-8'),
                                          headers={'Content-Type': 'application/json'})
                
                try:
                    with urllib.request.urlopen(req) as response:
                        print(f"‚úÖ Comando enviado: {action} {key} para Jogador {player_id}")
                except urllib.error.URLError as e:
                    print(f"‚ö†Ô∏è Servidor n√£o respondeu: {e}")
                    
        except Exception as e:
            print(f"‚ùå Erro ao enviar comando: {e}")
    
    def simulate_ultra_aggressive_game(self):
        """Simular uma partida ultra-agressiva onde algu√©m vai ganhar rapidamente"""
        print("üèÅ Iniciando partida ULTRA-AGRESSIVA!")
        
        # Fase 1: Todos come√ßam a pedalar simultaneamente
        for player_id in range(1, 5):
            self.send_key_command(player_id, 'keydown')
            self.last_states[player_id] = 1
            print(f"üö¥ Jogador {player_id} come√ßou a pedalar")
            time.sleep(0.05)  # Muito r√°pido
        
        # Fase 2: Competi√ß√£o ULTRA intensa
        game_duration = 15  # 15 segundos (muito mais r√°pido)
        start_time = time.time()
        
        while self.is_running and (time.time() - start_time) < game_duration:
            try:
                # Simular pedaladas ULTRA intensas
                for player_id in range(1, 5):
                    # 95% de chance de continuar pedalando (quase sempre pedalando)
                    if random.random() < 0.95:
                        if self.last_states[player_id] == 0:
                            self.send_key_command(player_id, 'keydown')
                            self.last_states[player_id] = 1
                            print(f"üö¥ Jogador {player_id} voltou a pedalar")
                    
                    # Apenas 5% de chance de parar (muito raro)
                    elif self.last_states[player_id] == 1 and random.random() < 0.05:
                        self.send_key_command(player_id, 'keyup')
                        self.last_states[player_id] = 0
                        print(f"üõë Jogador {player_id} parou temporariamente")
                
                # Ciclo ULTRA r√°pido para acumular energia rapidamente
                time.sleep(0.1)  # Apenas 0.1 segundos entre ciclos
                
            except Exception as e:
                print(f"‚ùå Erro na partida: {e}")
                break
        
        # Fase 3: Final da partida
        print("üèÅ Finalizando partida ULTRA-AGRESSIVA...")
        for player_id in range(1, 5):
            if self.last_states[player_id] == 1:
                self.send_key_command(player_id, 'keyup')
                self.last_states[player_id] = 0
                print(f"üõë Jogador {player_id} parou de pedalar")
        
        print("‚úÖ Partida ULTRA-AGRESSIVA conclu√≠da!")
    
    def start_new_game(self):
        """Enviar comando para iniciar nova partida"""
        try:
            print("üîÑ Enviando comando para iniciar nova partida...")
            
            # Enviar comando para o endpoint de nova partida
            data = {
                'type': 'new_game',
                'timestamp': time.time()
            }
            
            url = f'{self.server_url}/api/new-game'
            req = urllib.request.Request(url, 
                                      data=json.dumps(data).encode('utf-8'),
                                      headers={'Content-Type': 'application/json'})
            
            try:
                with urllib.request.urlopen(req) as response:
                    print("‚úÖ Comando de nova partida enviado com sucesso!")
            except urllib.error.URLError as e:
                print(f"‚ö†Ô∏è Servidor n√£o respondeu: {e}")
                
        except Exception as e:
            print(f"‚ùå Erro ao iniciar nova partida: {e}")
    
    def simulate_quick_game(self):
        """Simular uma partida r√°pida e intensa"""
        print("üèÅ Iniciando partida r√°pida simulada!")
        
        # Fase 1: Todos come√ßam a pedalar
        for player_id in range(1, 5):
            self.send_key_command(player_id, 'keydown')
            self.last_states[player_id] = 1
            print(f"üö¥ Jogador {player_id} come√ßou a pedalar")
            time.sleep(0.1)
        
        # Fase 2: Competi√ß√£o intensa
        game_duration = 30  # 30 segundos de partida
        start_time = time.time()
        
        while self.is_running and (time.time() - start_time) < game_duration:
            try:
                # Simular pedaladas intensas e coordenadas
                for player_id in range(1, 5):
                    # 90% de chance de continuar pedalando
                    if random.random() < 0.9:
                        if self.last_states[player_id] == 0:
                            self.send_key_command(player_id, 'keydown')
                            self.last_states[player_id] = 1
                            print(f"üö¥ Jogador {player_id} voltou a pedalar")
                    
                    # 15% de chance de parar temporariamente
                    elif self.last_states[player_id] == 1 and random.random() < 0.15:
                        self.send_key_command(player_id, 'keyup')
                        self.last_states[player_id] = 0
                        print(f"üõë Jogador {player_id} parou temporariamente")
                
                # Ciclo muito r√°pido para acumular energia
                time.sleep(0.2)
                
            except Exception as e:
                print(f"‚ùå Erro na partida: {e}")
                break
        
        # Fase 3: Final da partida
        print("üèÅ Finalizando partida simulada...")
        for player_id in range(1, 5):
            if self.last_states[player_id] == 1:
                self.send_key_command(player_id, 'keyup')
                self.last_states[player_id] = 0
                print(f"üõë Jogador {player_id} parou de pedalar")
        
        print("‚úÖ Partida simulada conclu√≠da!")
    
    def simulate_pedaling(self):
        """Simular pedaladas dos jogadores de forma mais agressiva"""
        while self.is_running:
            try:
                # Simular pedaladas mais frequentes e coordenadas
                for player_id in range(1, 5):
                    # 80% de chance de pedalar a cada ciclo (muito mais agressivo)
                    if random.random() < 0.8:
                        # Simular in√≠cio da pedalada
                        if self.last_states[player_id] == 0:
                            self.send_key_command(player_id, 'keydown')
                            self.last_states[player_id] = 1
                            print(f"üö¥ Jogador {player_id} come√ßou a pedalar")
                        
                        # Manter pedalando por mais tempo
                        time.sleep(0.1)  # Pausa menor
                        
                        # 20% de chance de parar (menor chance de parar)
                        if random.random() < 0.2:
                            self.send_key_command(player_id, 'keyup')
                            self.last_states[player_id] = 0
                            print(f"üõë Jogador {player_id} parou de pedalar")
                
                # Ciclo mais r√°pido para acumular energia rapidamente
                time.sleep(0.3)  # Aguardar apenas 0.3 segundos entre ciclos
                
            except Exception as e:
                print(f"‚ùå Erro na simula√ß√£o: {e}")
                break
    
    def start(self, mode='continuous'):
        """Iniciar simulador"""
        self.is_running = True
        print("üöÄ Simulador ESP32 iniciado!")
        print("üìä Enviando dados dos sensores via HTTP...")
        print(f"üåê Servidor: {self.server_url}")
        
        if mode == 'ultra_aggressive':
            print("üèÅ Modo: Partida ULTRA-AGRESSIVA (15 segundos)")
            # Thread para partida ultra-agressiva
            game_thread = threading.Thread(target=self.simulate_ultra_aggressive_game, daemon=True)
            game_thread.start()
        elif mode == 'quick_game':
            print("üèÅ Modo: Partida R√°pida (30 segundos)")
            # Thread para partida r√°pida
            game_thread = threading.Thread(target=self.simulate_quick_game, daemon=True)
            game_thread.start()
        else:
            print("üîÑ Modo: Simula√ß√£o Cont√≠nua")
            # Thread para simula√ß√£o cont√≠nua
            pedal_thread = threading.Thread(target=self.simulate_pedaling, daemon=True)
            pedal_thread.start()
        
        return True
    
    def stop(self):
        """Parar simulador"""
        self.is_running = False
        print("üõë Simulador ESP32 parado")

def main():
    print("üéÆ Simulador ESP32 para BikeJJ")
    print("=" * 40)
    
    # Configura√ß√µes
    server_url = 'http://localhost:8002'
    
    print(f"üîå Conectando ao servidor: {server_url}")
    
    # Testar conex√£o com o servidor
    try:
        response = urllib.request.urlopen(f'{server_url}/api/commands')
        if response.getcode() == 200:
            print("‚úÖ Servidor conectado com sucesso!")
        else:
            print("‚ö†Ô∏è Servidor respondeu com c√≥digo inesperado")
    except Exception as e:
        print(f"‚ùå N√£o foi poss√≠vel conectar ao servidor: {e}")
        print("üí° Certifique-se de que o servidor est√° rodando em http://localhost:8001")
        return
    
    # Escolher modo de simula√ß√£o
    print("\nüéØ Escolha o modo de simula√ß√£o:")
    print("1. üèÅ Partida ULTRA-AGRESSIVA (15 segundos - ALGU√âM VAI GANHAR!)")
    print("2. üèÅ Partida R√°pida (30 segundos intensos)")
    print("3. üîÑ Simula√ß√£o Cont√≠nua (pedaladas aleat√≥rias)")
    print("4. üîÑ Iniciar Nova Partida (comando para o jogo)")
    
    try:
        choice = input("\nDigite 1, 2, 3 ou 4: ").strip()
        if choice == '1':
            mode = 'ultra_aggressive'
        elif choice == '2':
            mode = 'quick_game'
        elif choice == '3':
            mode = 'continuous'
        elif choice == '4':
            mode = 'new_game'
        else:
            print("‚ùå Op√ß√£o inv√°lida, usando modo cont√≠nuo")
            mode = 'continuous'
    except KeyboardInterrupt:
        print("\nüõë Cancelado pelo usu√°rio")
        return
    
    # Criar simulador
    simulator = ESP32Simulator(server_url=server_url)
    
    try:
        if mode == 'new_game':
            print("\nüîÑ Enviando comando para iniciar nova partida...")
            simulator.start_new_game()
            print("‚úÖ Comando enviado!")
            return
        
        simulator.start(mode=mode)
        
        if mode == 'ultra_aggressive':
            print("\nüèÅ Partida ULTRA-AGRESSIVA iniciada!")
            print("üìä Simulando competi√ß√£o ULTRA intensa de 15 segundos")
            print("üéØ Todos os jogadores pedalando AGGRESSIVAMENTE")
            print("‚ö° ALGU√âM VAI GANHAR RAPIDAMENTE!")
            print("\n‚èπÔ∏è  Aguarde a conclus√£o da partida...")
            
            # Aguardar a partida terminar
            time.sleep(20)  # 15s + 5s de margem
            simulator.stop()
            print("üèÅ Partida ULTRA-AGRESSIVA conclu√≠da!")
            
        elif mode == 'quick_game':
            print("\nüèÅ Partida R√°pida iniciada!")
            print("üìä Simulando competi√ß√£o intensa de 30 segundos")
            print("üéØ Todos os jogadores pedalando agressivamente")
            print("\n‚èπÔ∏è  Aguarde a conclus√£o da partida...")
            
            # Aguardar a partida terminar
            time.sleep(35)  # 30s + 5s de margem
            simulator.stop()
            print("üèÅ Partida simulada conclu√≠da!")
            
        else:
            print("\nüîÑ Simula√ß√£o cont√≠nua rodando...")
            print("üìä Enviando comandos de pedalada automaticamente")
            print("üéØ Jogadores simulados:")
            print("  - Jogador 1: Tecla Q")
            print("  - Jogador 2: Tecla W") 
            print("  - Jogador 3: Tecla E")
            print("  - Jogador 4: Tecla R")
            print("\n‚èπÔ∏è  Pressione Ctrl+C para parar")
            
            while True:
                time.sleep(1)
                
    except KeyboardInterrupt:
        print("\nüõë Parando simulador...")
    finally:
        simulator.stop()

if __name__ == "__main__":
    main()
